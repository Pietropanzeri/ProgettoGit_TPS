// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerApi.Data;

#nullable disable

namespace ServerApi.Migrations
{
    [DbContext(typeof(RicettarioDbContext))]
    [Migration("20231122203252_pippo2")]
    partial class pippo2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ServerApi.Model.Foto", b =>
                {
                    b.Property<int>("FotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("FotoData")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int?>("RicettaId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("FotoId");

                    b.HasIndex("RicettaId");

                    b.ToTable("Fotos");
                });

            modelBuilder.Entity("ServerApi.Model.FotoUtente", b =>
                {
                    b.Property<int>("FotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("FotoData")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int?>("UtenteId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("FotoId");

                    b.ToTable("FotosUtenti");
                });

            modelBuilder.Entity("ServerApi.Model.Ingrediente", b =>
                {
                    b.Property<int>("IngredienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataFine")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataInizio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IngredienteId");

                    b.ToTable("Ingredienti");
                });

            modelBuilder.Entity("ServerApi.Model.Ricetta", b =>
                {
                    b.Property<int>("RicettaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAggiunta")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Difficolta")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Piatto")
                        .HasColumnType("int");

                    b.Property<string>("Preparazione")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Tempo")
                        .HasColumnType("int");

                    b.Property<int>("UtenteId")
                        .HasColumnType("int");

                    b.HasKey("RicettaId");

                    b.HasIndex("UtenteId");

                    b.ToTable("Ricette");
                });

            modelBuilder.Entity("ServerApi.Model.RicettaIngrediente", b =>
                {
                    b.Property<int>("RicettaId")
                        .HasColumnType("int");

                    b.Property<int>("IngredienteId")
                        .HasColumnType("int");

                    b.HasKey("RicettaId", "IngredienteId");

                    b.HasIndex("IngredienteId");

                    b.ToTable("RicetteIngredienti");
                });

            modelBuilder.Entity("ServerApi.Model.Utente", b =>
                {
                    b.Property<int>("UtenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FotoId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UtenteId");

                    b.HasIndex("FotoId")
                        .IsUnique();

                    b.ToTable("Utenti");
                });

            modelBuilder.Entity("ServerApi.Model.UtenteRicettaSalvata", b =>
                {
                    b.Property<int>("RicettaId")
                        .HasColumnType("int");

                    b.Property<int>("UtenteId")
                        .HasColumnType("int");

                    b.HasKey("RicettaId", "UtenteId");

                    b.HasIndex("UtenteId");

                    b.ToTable("UtentiRicetteSalvate");
                });

            modelBuilder.Entity("ServerApi.Model.UtenteUtenteSeguito", b =>
                {
                    b.Property<int>("UtenteId")
                        .HasColumnType("int");

                    b.Property<int>("UtenteSeguitoId")
                        .HasColumnType("int");

                    b.HasKey("UtenteId", "UtenteSeguitoId");

                    b.HasIndex("UtenteSeguitoId");

                    b.ToTable("UtenteUtentiSeguiti");
                });

            modelBuilder.Entity("ServerApi.Model.Foto", b =>
                {
                    b.HasOne("ServerApi.Model.Ricetta", "Ricetta")
                        .WithMany("Fotos")
                        .HasForeignKey("RicettaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ricetta");
                });

            modelBuilder.Entity("ServerApi.Model.Ricetta", b =>
                {
                    b.HasOne("ServerApi.Model.Utente", "Utente")
                        .WithMany("Ricetta")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("ServerApi.Model.RicettaIngrediente", b =>
                {
                    b.HasOne("ServerApi.Model.Ingrediente", "Ingrediente")
                        .WithMany("RicettaIngredienti")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServerApi.Model.Ricetta", "Ricetta")
                        .WithMany("RicettaIngredienti")
                        .HasForeignKey("RicettaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ingrediente");

                    b.Navigation("Ricetta");
                });

            modelBuilder.Entity("ServerApi.Model.Utente", b =>
                {
                    b.HasOne("ServerApi.Model.FotoUtente", "FotoUtente")
                        .WithOne("Utente")
                        .HasForeignKey("ServerApi.Model.Utente", "FotoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FotoUtente");
                });

            modelBuilder.Entity("ServerApi.Model.UtenteRicettaSalvata", b =>
                {
                    b.HasOne("ServerApi.Model.Ricetta", "Ricetta")
                        .WithMany("UtenteRicetteSalvate")
                        .HasForeignKey("RicettaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServerApi.Model.Utente", "Utente")
                        .WithMany("UtenteRicetteSalvate")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ricetta");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("ServerApi.Model.UtenteUtenteSeguito", b =>
                {
                    b.HasOne("ServerApi.Model.Utente", "Utente")
                        .WithMany("UtenteUtentiSeguiti")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServerApi.Model.Utente", "UtenteSeguito")
                        .WithMany("UtenteUtentiChetiSeguono")
                        .HasForeignKey("UtenteSeguitoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Utente");

                    b.Navigation("UtenteSeguito");
                });

            modelBuilder.Entity("ServerApi.Model.FotoUtente", b =>
                {
                    b.Navigation("Utente")
                        .IsRequired();
                });

            modelBuilder.Entity("ServerApi.Model.Ingrediente", b =>
                {
                    b.Navigation("RicettaIngredienti");
                });

            modelBuilder.Entity("ServerApi.Model.Ricetta", b =>
                {
                    b.Navigation("Fotos");

                    b.Navigation("RicettaIngredienti");

                    b.Navigation("UtenteRicetteSalvate");
                });

            modelBuilder.Entity("ServerApi.Model.Utente", b =>
                {
                    b.Navigation("Ricetta");

                    b.Navigation("UtenteRicetteSalvate");

                    b.Navigation("UtenteUtentiChetiSeguono");

                    b.Navigation("UtenteUtentiSeguiti");
                });
#pragma warning restore 612, 618
        }
    }
}
